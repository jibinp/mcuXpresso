/*
===============================================================================
 Name        : proj_jibin_freertosBlink01.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#include "board.h"
#include "FreeRTOS.h"
#include "task.h"

/*****************************************************************************
 * Private types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Public types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Private functions
 ****************************************************************************/

/* Sets up system hardware */
static void prvSetupHardware(void)
{
    SystemCoreClockUpdate();
    Board_Init();

    /* Initial LED0 state is off */
    Board_LED_Set(0, false);

    /* Initial LED1 state is off */
    Board_LED_Set(1, false);

        /* Initial LED2 state is off */
    Board_LED_Set(2, false);
}

void dot(){
    unsigned long int i1,j1;

    for(j1=0;j1<100;j1++)for(i1=0;i1<30000;i1++);
    for(j1=0;j1<100;j1++)for(i1=0;i1<30000;i1++);
}
/* LED1 toggle thread */
static void vLEDTask1(void *pvParameters) {


    while (1) {
        Chip_GPIO_WritePortBit(LPC_GPIO, 0, 22, 0);
            dot();
            Chip_GPIO_WritePortBit(LPC_GPIO, 0, 22, 1);
            dot();
            Chip_GPIO_WritePortBit(LPC_GPIO, 3, 25, 0);
            dot();
            Chip_GPIO_WritePortBit(LPC_GPIO, 3, 25, 1);
            dot();
            Chip_GPIO_WritePortBit(LPC_GPIO, 3, 26, 0);
            dot();
            Chip_GPIO_WritePortBit(LPC_GPIO, 3, 26, 1);
            dot();
    }
}

/* LED2 toggle thread */


/* UART (or output) thread */
static void vUARTTask(void *pvParameters) {
    int tickCnt = 0;

    while (1) {
        DEBUGOUT("Tick: %d\r\n", tickCnt);
        tickCnt++;

        /* About a 1s delay here */
        vTaskDelay(configTICK_RATE_HZ);
    }
}

/*****************************************************************************
 * Public functions
 ****************************************************************************/

/**
 * @brief    main routine for FreeRTOS blinky example
 * @return    Nothing, function should not exit
 */
int main(void)
{
    prvSetupHardware();

    /* LED1 toggle thread */
    xTaskCreate(vLEDTask1, (signed char *) "vTaskLed1",
                configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 1UL),
                (xTaskHandle *) NULL);

    /* LED2 toggle thread */

    /* UART output thread, simply counts seconds */
    xTaskCreate(vUARTTask, (signed char *) "vTaskUart",
                configMINIMAL_STACK_SIZE, NULL, (tskIDLE_PRIORITY + 1UL),
                (xTaskHandle *) NULL);

    /* Start the scheduler */
    vTaskStartScheduler();

    /* Should never arrive here */
    return 1;
}
/**
 * @}
 */
